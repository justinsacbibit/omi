"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("friends"),ApplicationConfiguration.registerModule("localomis"),ApplicationConfiguration.registerModule("omis"),ApplicationConfiguration.registerModule("owers"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]).run(["$rootScope","$location","Authentication",function($rootScope,$location,Authentication){$rootScope.$watch(function(){return $location.path()},function(newValue){Authentication.user&&"/"===newValue&&$location.path("/owers")})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("friends").config(["$stateProvider",function($stateProvider){$stateProvider.state("listFriends",{url:"/friends",templateUrl:"modules/friends/views/list-friends.client.view.html"}).state("createFriend",{url:"/friends/create",templateUrl:"modules/friends/views/create-friend.client.view.html"}).state("viewFriend",{url:"/friends/:friendId",templateUrl:"modules/friends/views/view-friend.client.view.html"}).state("editFriend",{url:"/friends/:friendId/edit",templateUrl:"modules/friends/views/edit-friend.client.view.html"})}]),angular.module("friends").controller("FriendsController",["$scope","$stateParams","$location","Authentication","Friends",function($scope,$stateParams,$location,Authentication,Friends){$scope.authentication=Authentication,$scope.heading=function(ower){var name=ower.firstName?ower.firstName+" "+(ower.lastName?ower.lastName+" ":""):ower.displayName+" ",heading=name;return 0===ower.balance?heading+="does not owe you anything":(heading+=ower.balance<0?"is owed":"owes you",heading+=" $"+Math.abs(ower.balance)),heading},$scope.create=function(){var friend=new Friends({username:this.username});friend.$save(function(response){$location.path("friends/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(friend){if(friend){friend.$remove();for(var i in $scope.friends)$scope.friends[i]===friend&&$scope.friends.splice(i,1)}else $scope.friend.$remove(function(){$location.path("owers")})},$scope.update=function(){var friend=$scope.friend;friend.$update(function(){$location.path("friends/"+friend._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.friends=Friends.query()},$scope.findOne=function(){$scope.friend=Friends.get({friendId:$stateParams.friendId})}}]),angular.module("friends").factory("Friends",["$resource",function($resource){return $resource("friends/:friendId",{friendId:"@_id"},{update:{method:"PUT"}})}]),angular.module("localomis").config(["$stateProvider",function($stateProvider){$stateProvider.state("listLocalomis",{url:"/localomis",templateUrl:"modules/localomis/views/list-localomis.client.view.html"}).state("createLocalomi",{url:"/owers/:owerId/localomis/create",templateUrl:"modules/localomis/views/create-localomi.client.view.html"}).state("viewLocalomi",{url:"/localomis/:localomiId",templateUrl:"modules/localomis/views/view-localomi.client.view.html"}).state("editLocalomi",{url:"/localomis/:localomiId/edit",templateUrl:"modules/localomis/views/edit-localomi.client.view.html"})}]),angular.module("localomis").controller("LocalomisController",["$scope","$stateParams","$location","Authentication","Localomis",function($scope,$stateParams,$location,Authentication,Localomis){$scope.authentication=Authentication,$scope.create=function(){var localomi=new Localomis({name:this.name,amount:this.amount,note:this.note,owerId:$stateParams.owerId,direction:this.direction,type:this.type});localomi.$save(function(response){$location.path("localomis/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(localomi){if(localomi){localomi.$remove();for(var i in $scope.localomis)$scope.localomis[i]===localomi&&$scope.localomis.splice(i,1)}else $scope.localomi.$remove(function(){$location.path("localomis")})},$scope.update=function(){var localomi=$scope.localomi;localomi.$update(function(){$location.path("localomis/"+localomi._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.localomis=Localomis.query({owerId:$stateParams.owerId})},$scope.findOne=function(){$scope.localomi=Localomis.get({localomiId:$stateParams.localomiId})},$scope.direction=function(localomi){return"omi"===localomi.type?"toOwer"===localomi.direction?"lent":"borrowed":"toOwer"===localomi.direction?"paid":"received"}}]),angular.module("localomis").factory("Localomis",["$resource",function($resource){return $resource("localomis/:localomiId",{localomiId:"@_id"},{update:{method:"PUT"}})}]),angular.module("omis").run(["Menus",function(){}]),angular.module("omis").config(["$stateProvider",function($stateProvider){$stateProvider.state("listOmis",{url:"/omis",templateUrl:"modules/omis/views/list-omis.client.view.html"}).state("createOmi",{url:"/omis/create",templateUrl:"modules/omis/views/create-omi.client.view.html"}).state("viewOmi",{url:"/omis/:omiId",templateUrl:"modules/omis/views/view-omi.client.view.html"}).state("editOmi",{url:"/omis/:omiId/edit",templateUrl:"modules/omis/views/edit-omi.client.view.html"})}]),angular.module("omis").controller("OmisController",["$scope","$stateParams","$location","Authentication","Omis",function($scope,$stateParams,$location,Authentication,Omis){$scope.authentication=Authentication,$scope.create=function(){var from="sending"===this.direction?Authentication.user._id:$location.search().friendId,to="sending"===this.direction?$location.search().friendId:Authentication.user._id,omi=new Omis({name:this.name,amount:this.amount,note:this.note,type:this.type,from:from,to:to});omi.$save(function(response){$location.path("omis/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(omi){if(omi){omi.$remove();for(var i in $scope.omis)$scope.omis[i]===omi&&$scope.omis.splice(i,1)}else $scope.omi.$remove(function(){$location.path("omis")})},$scope.update=function(){var omi=$scope.omi;omi.$update(function(){$location.path("omis/"+omi._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.omis=Omis.query()},$scope.findOne=function(){$scope.omi=Omis.get({omiId:$stateParams.omiId})}}]),angular.module("omis").factory("Omis",["$resource",function($resource){return $resource("omis/:omiId",{omiId:"@_id"},{update:{method:"PUT"}})}]),angular.module("owers").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Owers","owers","dropdown","/owers(/create)?"),Menus.addSubMenuItem("topbar","owers","List Owers","owers"),Menus.addSubMenuItem("topbar","owers","New Ower","owers/create")}]),angular.module("owers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listOwers",{url:"/owers",templateUrl:"modules/owers/views/list-owers.client.view.html"}).state("createOwer",{url:"/owers/create",templateUrl:"modules/owers/views/create-ower.client.view.html"}).state("viewOwer",{url:"/owers/:owerId",templateUrl:"modules/owers/views/view-ower.client.view.html"}).state("editOwer",{url:"/owers/:owerId/edit",templateUrl:"modules/owers/views/edit-ower.client.view.html"})}]),angular.module("owers").controller("OwersController",["$scope","$stateParams","$location","Authentication","Owers",function($scope,$stateParams,$location,Authentication,Owers){$scope.authentication=Authentication,$scope.heading=function(ower){var heading=ower.firstName+" "+(ower.lastName?ower.lastName+" ":"");return 0===ower.balance?heading+="does not owe you anything":(heading+=ower.balance<0?"is owed":"owes you",heading+=" $"+Math.abs(ower.balance)),heading},$scope.create=function(){var ower=new Owers({firstName:this.firstName,lastName:this.lastName});ower.$save(function(response){$location.path("owers/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message.message})},$scope.remove=function(ower){if(ower){ower.$remove();for(var i in $scope.owers)$scope.owers[i]===ower&&$scope.owers.splice(i,1)}else $scope.ower.$remove(function(){$location.path("owers")})},$scope.update=function(){var ower=$scope.ower;ower.$update(function(){$location.path("owers/"+ower._id)},function(errorResponse){$scope.error=errorResponse.data.message.message})},$scope.find=function(){$scope.owers=Owers.query()},$scope.findOne=function(){$scope.ower=Owers.get({owerId:$stateParams.owerId})}}]),angular.module("owers").factory("Owers",["$resource",function($resource){return $resource("owers/:owerId",{owerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);